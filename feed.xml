<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>fur2-inky指南</title>
    <link href="https://fur2.now.sh/feed.xml" rel="self" />
    <link href="https://fur2.now.sh" />
    <updated>2020-01-18T17:24:50+08:00</updated>
    <author>
        <name>Legacy</name>
    </author>
    <id>https://fur2.now.sh</id>

    <entry>
        <title>更多文档</title>
        <author>
            <name>Legacy</name>
        </author>
        <link href="https://fur2.now.sh/geng-duo-wen-dang/"/>
        <id>https://fur2.now.sh/geng-duo-wen-dang/</id>

        <updated>2020-01-18T17:14:54+08:00</updated>
            <summary>
                <![CDATA[
                    高阶 Inky 残卷 INK 最初被设计为游戏引擎的脚本插件，因此具有丰富而强大的功能。我将官方文档中，部分我有兴趣，且对你使用 Inky 可能有帮助的内容翻译至此。如你发现“好像少了些什么”，或想进一步了解，请阅读官方文档。 随着故事变长，在没有其他结构的情况下，它们会越来越乱，难以井井有条。 结点可以包括称为“针脚”（stitches）的子结点，这些使用单个等号（=）标记。 === the_orient_express === //东方快车 结点= in_first_class //头等厢 针脚 ...= in_third_class //三等厢 针脚 ...= in_the_guards_van //警务车厢 针脚&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="header___O32EY">
<div class="title___3ntsK">
<h1 id="article-title" class="articleTitle___3zWrP">高阶 Inky 残卷</h1>
</div>
</div>
<div class="content___2v1LS">
<div class="yuque-doc-content" >
<div class="lake-engine-view" tabindex="0">
<p> </p>
<blockquote>
<p>INK 最初被设计为游戏引擎的脚本插件，因此具有丰富而强大的功能。我将官方文档中，部分我有兴趣，且对你使用 Inky 可能有帮助的内容翻译至此。如你发现“好像少了些什么”，或想进一步了解，请阅读<a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
</blockquote>
<p> </p>
<h1 id="TLpja">1. 基础</h1>
<h2 id="cDQJr">1.1 <a href="https://www.yuque.com/apsno9/pcke0w/gix3ga" target="_blank" rel="noopener noreferrer">Inky 基础教程</a></h2>
<h2 id="G4kWa">1.2 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#6-includes-and-stitches" target="_blank" rel="noopener noreferrer">针脚 stitches</a></h2>
<h3 id="QzCB7">结点可有子节点</h3>
<p>随着故事变长，在没有其他结构的情况下，它们会越来越乱，难以井井有条。</p>
<p>结点可以包括称为“针脚”（stitches）的子结点，这些使用<strong>单个等号</strong>（<code>=</code>）标记。</p>
<p> </p>
<div id="subQJ"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== the_orient_express === //东方快车 结点
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= in_first_class //头等厢 针脚
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ...
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= in_third_class //三等厢 针脚
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ...
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= in_the_guards_van //警务车厢 针脚
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ...
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= missed_the_train //错过火车 针脚
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ...</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>例如，可以使用一个结点来写拍摄场景，用结点里的多个针脚来写场景中的事件。</p>
<p> </p>
<h3 id="8wPDj">针脚有唯一的名称</h3>
<p>针脚可被用于跳转的地址。</p>
<p> </p>
<div id="Vov3J"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [前往三等厢]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; the_orient_express.in_third_class //跳转到 东方快车结点 下的 三等舱针脚
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [前往警务车厢]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; the_orient_express.in_the_guards_van //跳转到 东方快车结点 下的 警务车厢针脚</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h3 id="ej2FD">第一个是默认针脚</h3>
<p>如果结点包含针脚，默认跳转到第一个针脚。</p>
<p> </p>
<div id="Ojl9M"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [前往头等厢]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “头等厢, 先生。 还有其他地方吗？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; the_orient_express</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>等同于（...除非我们改变结点内针脚的顺序！）：</p>
<p> </p>
<div id="GUD6w"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [前往头等厢]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “头等厢, 先生。 还有其他地方吗？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; the_orient_express.in_first_class </span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>你还可以在针脚外的顶部加入任何内容，但注意此时不会自动运行第一个针脚。</p>
<p> </p>
<div id="ZuAaq"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== the_orient_express === 
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">我们上车了，但是去哪？
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [头等厢] -&gt; in_first_class
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [二等厢] -&gt; in_second_class
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">= in_first_class //不会自动运行第一个针脚
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ...
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= in_second_class
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ...</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h3 id="ENqoW">本地跳转</h3>
<p>在结点内部，你无需完整的针脚地址。</p>
<p> </p>
<div id="SB9nS"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; the_orient_express
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== the_orient_express ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= in_first_class 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    我安顿好我的主人。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   [前往三等厢]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; in_third_class
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= in_third_class
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    我坐下来了。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>这意味着针脚和结点的名称不能相同，但是不同的结点里可以有相同名称的针脚。（你不能把某个车厢也叫东方快车，但东方快车和蒙古专列里都可以有头等舱。）如果使用了不明确的名称，编译器发出警告。</p>
<p> </p>
<h3 id="KrN2u"><a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#script-files-can-be-combined" target="_blank" rel="noopener noreferrer">脚本文件可以合并</a></h3>
<p> </p>
<h2 id="AfsXv">1.3 选项 choices</h2>
<h3 id="w2ZSK"><a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#fallback-choices" target="_blank" rel="noopener noreferrer">后备选项 fallback choices</a></h3>
<p>如果某个地方都是一次性选项，那么多次经历后，可能会出现“内容用光（ran out of content）”的错误。</p>
<p>我们可通过“后备选择”解决问题。后备选项不会直接显示给玩家，但如果没有其他选项可选是，则游戏会自动选择。</p>
<p>后备选项只是“没有选项时的选择”：<code>*	-&gt; out_of_options</code></p>
<p>并且，在轻微滥用语法下，我们可以使其中的内容做出默认选择：</p>
<p> </p>
<div id="YPDtl"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   -&gt; 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    穆德无法解释他是怎么从那辆燃烧着的货车里出来的。 -&gt; season_2</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>举个例子：</p>
<p> </p>
<div id="kHdIR"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== find_help ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你在人群中拼命地寻找一张友好的脸。 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   戴帽子的女人[？] 粗暴地把你推到一边。 -&gt; find_help
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   拿公文包的男人[？] 很厌恶的从旁边匆匆而过。 -&gt; find_help 
</span></span>  
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   -&gt;  //后备选项
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        但为时已晚：你倒在站台上。一切都结束了。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; END</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="1.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/262531/1574067425919-b245ce8c-d8c7-42f7-89cf-ab0c7c67ff9e.gif" alt="1.gif"  ></span></p>
<p> </p>
<h2 id="RSKMD">1.4 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#6-variable-text" target="_blank" rel="noopener noreferrer">可变文本</a> variable text</h2>
<h3 id="eqPku">序列</h3>
<p>序列（默认）每次都会显示下一个元素。当“没有下一个”时，它将继续显示最后一个元素。</p>
<p> </p>
<div id="yTUMl"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">电台嘶嘶作响。 {“三！”|“二！”|“一！”|传来了爆炸的响声。|这只有些噪声}
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">{我用五磅钞票给我买了杯咖啡。|我买了第二杯咖啡给朋友。|我没钱买咖啡了。}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h3 id="SpnVS">周期，一次性，随机</h3>
<p>循环（标记 <code>&amp;</code>）就像序列，但它循环内容。</p>
<p> </p>
<div id="uhfgv"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">今天是 {&amp;周一|周二|周三|周四|周五|周六|周日}。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>一次性（标记 <code>!</code>）也像序列，但当“没有下一个时”，它将不显示。</p>
<p> </p>
<div id="NliTD"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">他给我讲了个笑话。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{!我有礼貌的笑了。|我微笑了。|我做了下鬼脸。|我不想再做出反应了。}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>随机（标记 <code>~</code>）随机显示内容。</p>
<p> </p>
<div id="MuqTC"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我掷了枚硬币。 {~字面|花面}。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h3 id="suQW6">更多技巧</h3>
<p>可以包含空元素。</p>
<div id="B9FAX"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我向前迈了一步 {!||||然后灯火熄灭了。 -&gt; eek}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>可以进行嵌套。</p>
<p> </p>
<div id="9SaGB"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">这个怪兽{&amp;{没浪费时间|}打|爪}{&amp;你|进你{&amp;的腿|的胳膊|的胸}}。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>可插入跳转。</p>
<p> </p>
<div id="EcXOO"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我{在等。|等了一会|打盹了。|醒来又等了会。|放弃并离开了 -&gt; leave_post_office}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>也可在选项中使用。（注意，<code>{</code>不能出现在选项开头，会与条件选项混淆；<code>/</code> 出现在里面可能出现错误。）</p>
<p> </p>
<div id="gVEEX"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+   “您好, {&amp;主人|Fogg先生|你|棕眼}!”[] 我喊道。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>可变文字可以在循环内使用，让游戏看起来很智能，而无需特别的工作。</p>
<p>这里是一个单结点版的"打地鼠"，<a href="https://inky-mole.netlify.com/" target="_blank" rel="noopener noreferrer">体验故事运行</a>。我们使用一次性和后备选项，阻止“地鼠逃走”，游戏始终会结束。</p>
<p> </p>
<div id="cqhMx"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt;whack_a_mole
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== whack_a_mole ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    {我举起了锤子。|{~没打中！|没有！|不好，它在哪？| 偏了！| 见鬼…| 啊，手滑了！| 嗷呜！|啊哈，抓住了！-&gt; over }}
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    这个{&amp;地鼠|{&amp;不友好的|可恶的|低级的}{&amp;生物|啮齿动物}}{在某处|藏在某处|仍然逍遥法外|嘲笑我|依旧没打中|注定会失败}。 &lt;&gt;
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    {!我会抓住它！|但这次它逃不掉了。}
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   [{~打|砸|尝试}左上角]  -&gt; whack_a_mole
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *  [{~就是|暴击|猛击}右上角] -&gt; whack_a_mole
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *  [{~砍|锤}中间] -&gt; whack_a_mole
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *  [{~痛击|肯定是}左下角]   -&gt; whack_a_mole
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *  [{~掀开|重击}右下角]    -&gt; whack_a_mole
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * -&gt; 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你累坏了！地鼠击败了你！-&gt;over
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">= over
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content"># CLASS: end
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">……全剧终
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ 从头再来？
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    # RESTART
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; END</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>这里有一些生活建议。请注意选项，电视的吸引力永远不会消失：</p>
<p> </p>
<div id="95XSB"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== turn_on_television ===  
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我打开电视{一次|两次|三次|更多次}，但电视上 {没啥有意思的东西，所以关上了电视|依旧没什么有意思的东西|比以前更不能吸引我的兴趣了|只有垃圾|演关于鲨鱼的节目我并不喜欢鲨鱼|什么都没有}。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ [再试试]    -&gt; turn_on_television
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">* [去外面] -&gt; go_outside_instead
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== go_outside_instead ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; END</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h2 id="FGlAy">1.5 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#7-game-queries-and-functions" target="_blank" rel="noopener noreferrer">查询</a> queries</h2>
<p>INK 提供了一些有用的关于游戏状态“<span class="lake-fontsize-12" style="font-size: 12px;">game level”</span>查询，用于条件逻辑。它们不是语言的一部分，但它们总是有用的，并且不能由作者编辑。从某种意义上说，它们是语言的“标准库函数”。惯例是用大写字母来命名。</p>
<p> </p>
<h3 id="GjAFN">CHOICE_COUNT()</h3>
<p><code>CHOICE_COUNT</code> 返回到目前为止，当前区域内的选项数，例如：</p>
<p> </p>
<div id="QBg4k"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   {false} Option A
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">* {true} Option B
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">* {CHOICE_COUNT() == 1} Option C</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>false 表示不生成此选项，因此计数是1，显示的B和C（？）。</p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574084928723-3f196da5-79aa-476b-9dc2-ee86aa5bafb6.png" alt="image.png"  ></span></p>
<p> </p>
<h3 id="nUKd9">TURNS()</h3>
<p><code>TURNS</code> 返回自游戏开始以来的回合数。</p>
<p> </p>
<div id="Xrawr"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">您总共经历了{TURNS()}个结点。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574085516084-7768dd9c-3279-4f98-b451-16774b27e164.png" alt="image.png"  ></span></p>
<h3 id="CHNNL">TURNS_SINCE(-&gt; knot)</h3>
<p><code>TURNS_SINCE</code> 返回自上次访问特定结点或针脚的跳转次数（玩家输入的）。</p>
<p> </p>
<p>值为 0 表示"在经历这个区域"。</p>
<p> </p>
<div id="JU6Qn"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">==laugh
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">你笑个不停……
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+   哈哈哈…… -&gt; laugh
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   {TURNS_SINCE(-&gt; laugh) == 0} 你尝试不笑了-&gt;END</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>值为 -1 表示"从未经历过"，其他任何正值都意味着“经历过多次了”。</p>
<p> </p>
<div id="QiM0S"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   {TURNS_SINCE(-&gt; sleeping.intro) &gt; 10} 你觉得很累…… -&gt; sleeping </span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>注意，这里实际只是向<code>TURNS_SINCE</code> 传递一个参数<code>“转移的目标”</code>，而非是跳转至结点地址，此处不进行节点跳转。</p>
<p> </p>
<h3 id="P9O3i">SEED_RANDOM()</h3>
<p><code>SEED_RANDOM</code> 出于测试目的，固定随机数生成器通常很有用，这会让每次播运行 INK 都固定产生相同的结果。你可以通过“种子”随机系统来实现。</p>
<p> </p>
<div id="9w0r6"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">~ SEED_RANDOM(235)</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span class="lake-fontsize-12" style="font-size: 12px;">传递给种子函数的数字可以是任意的，不同的种子将导致不同结果的序列。</span></p>
<p><span class="lake-fontsize-12" style="font-size: 12px;"> </span></p>
<p><span class="lake-fontsize-12" style="font-size: 12px;"><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574087802137-5cedc46e-1072-4255-b0d3-36ea47ad95ad.png" alt="image.png"  ></span></span></p>
<p><span class="lake-fontsize-12" style="font-size: 12px;"><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574087910175-142e504c-8512-463f-81eb-aa8ee53dd38b.png" alt="image.png"  ></span></span></p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574087982421-449644d7-4d0d-48ef-9596-e537f561e64e.png" alt="image.png"  ></span></p>
<p> </p>
<div id="3DLiL"    ><hr></div>
<p> </p>
<h1 id="QmuLI">2. <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#part-2-weave" target="_blank" rel="noopener noreferrer">编织</a> weave</h1>
<p> </p>
<p>到目前为止，我们一直以最基础的方式构建故事的分支，从“选项”到“页面”。</p>
<p>但这要求我们命名故事中的每个目的地且保持唯一性，可能会减慢编写速度并阻挠较小的分支。</p>
<p>INK 拥有更为强大的语法，旨在简化始终向前的故事流（写起来像大多数的故事，而非计算机程序）。</p>
<p> </p>
<p>这种系统称为“编织”（weave），它由基础语法和选项语法，以及两个新功能构成：“收束标记 <code>-</code> ”，“选项与收束的嵌套”。</p>
<p> </p>
<h2 id="LLWSR">2.1 收束 gathers</h2>
<p>收束（gathers） <code>-</code> 将小分支收回到一起。让我们看这个例子：</p>
<p> </p>
<div id="LumZN"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“怎么了？”我的主人问。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “我有些累。”[]我重复道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “确实，” 他答道。 “这太糟了。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “没事，先生！”[] 我回应道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *  我说，这次旅行真可怕。”[] 我不想再继续了。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “啊，” 他有些动容。 "你看起来很沮丧。明天，情况会好些的。"</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>在真正的游戏中，这三个选项都可能导致相同的结果，Fogg 先生离开了房间。我们可用收束来执行此操作，而无需创建任何新结点或新跳转。</p>
<p> </p>
<div id="pxFGN"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“怎么了？”我的主人问。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “我有些累。”[]我重复道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “确实，” 他答道。 “这太糟了。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “没事，先生！”[] 我回应道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *  我说，这次旅行真可怕。”[] 我不想再继续了。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “啊，” 他有些动容。 "你看起来很沮丧。明天，情况会好些的。"
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   Fogg 先生离开了房间。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>我们可将这些“收束和分支”串在一起，让故事始终向前运行。</p>
<p> </p>
<div id="dd86S"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== escape === 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我跑出森林，狗跟在我后面。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * 我检查了下珠宝[]，都还在我的钱包里，这感觉就像步入了春天。 &lt;&gt;
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * 我没停下来喘口气[]，继续向前跑。&lt;&gt;
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   我欢呼了出来。 &lt;&gt;
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   路没多远了！Mackie 会发动引擎，然后我就安全了。//收束
</span></span>  
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   我来到路边四处张望[]。 你能相信吗？
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * 我不该总是说，Mackie一直很可靠[]。他从未让我失望过。更确切地说，从来没有，直到那晚前。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   路旁边是空的。 Mackie 不见了。//再次收束</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>这是最基本的编织。本节后面还详细介绍了编织的嵌套、包含选项和跳转、内部跳转、以及根据前面的经历来影响后续的内容。</p>
<p> </p>
<h3 id="dGPkT">编织的哲学</h3>
<p>编织不仅仅是方便分支收束，也是一种强大的内容创作的方式。上面的示例就已有4种路线，甚至可能会更复杂。使用普通的跳转，必须点到点的检查分支，且很容易出错。</p>
<p>通过编织，只需从顶部开始，就能运行到故事底部。在基本编织结构中，不会有跳转错误，编写的文本也很容易浏览。这意味着无需测试游戏中的所有分支，就能确保它们都能按预期工作。</p>
<p>使用编织还可以轻松修改选项，拆开故事并插入其他选项，而无需重新设计任何流程。</p>
<p> </p>
<h2 id="oEO1M">2.2 嵌套</h2>
<p>上面展示的编织是非常简单的“扁平”结构。不管玩家选什么，他们都要经历相同的回合数才能从上到下。但是，有时某些选项需要深或复。因此，编织可以嵌套。</p>
<p> </p>
<p>注意，编织的嵌套非常强大且紧凑，但你可能需要一些时间来适应！</p>
<p> </p>
<h3 id="RIa74">选项收束均可</h3>
<p>选项嵌套看下方的场景：</p>
<p> </p>
<div id="aiN3V"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- “好吧，Poirot？谋杀还是自杀？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   “谋杀！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">* “自杀！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   Christie 女士片刻后放下手抄。台下的评委们都目瞪口呆。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>提出的问题首选是“谋杀！” 或“自杀！”。如果 Poirot 宣布自杀，就没有其他事情可做了。但是在谋杀案中，还需要一个后续问题，“他怀疑是谁？”</p>
<p>我们可以通过一组嵌套的子选项来添加新选项。通过使用两个星号（<code>**</code>）而非是一个星号，告诉 INK 这些新选项是另一个选择的一部分。</p>
<p> </p>
<div id="Ifajm"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-  “好吧，Poirot？谋杀还是自杀？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “谋杀！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “那么，你怀疑谁？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “日本探长！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “船长 Hastings！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “我自己！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * “自杀！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   Christie 女士片刻后放下手抄。台下的评委们都目瞪口呆。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>（用缩进显示嵌套关系是个不错的习惯，即使编译器不在乎这些。）</p>
<p>如果我们想向另一条路线添加新的子选项，可以按类似的方式做。</p>
<p> </p>
<div id="KCDbn"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-  “好吧，Poirot？谋杀还是自杀？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “谋杀！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “那么，你怀疑谁？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “日本探长！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “船长 Hastings！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “我自己！” 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * “自杀！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “真的吗，Poirot？你确定吗？
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “确定。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “这很明显。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   Christie 女士片刻后放下手抄。台下的评委们都目瞪口呆。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>现在，无论前面选择什么，最后都能收到 Christie 女士的出场。</p>
<p> </p>
<p>有时不只是更多的选项，可能还有更多的剧情。我们可以用收束嵌套解决这个问题。</p>
<p> </p>
<div id="iUNED"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-  “好吧，Poirot？谋杀还是自杀？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “谋杀！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “那么，你怀疑谁？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “日本探长！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “船长 Hastings！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “我自己！” 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - -  “你一定是在开玩笑！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * *  “朋友，我是认真的！”    
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * *  “要是……” 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * “自杀！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “真的吗，Poirot？你确定吗？
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “确定。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *  “这很明显。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   Christie 女士片刻后放下手抄。台下的评委们都目瞪口呆。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>如果玩家选择谋杀，在这一分支后面会有两组选项，完全是“扁平”编织的。<span    ><img class="image lake-drag-image" title="1.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/262531/1574171238244-e472627d-0e0d-4ae3-9389-795719dee627.gif" alt="1.gif"  ></span></p>
<p> </p>
<p>收束是直观的，但它们的行为很难说出来：通常在选择之后，故事会找到下一个非更低级的收束，并移动下来。基本思想是：选项将故事的支线分开，并通过收束将它们重新合在一起。（因此，这被称为“编织”！）</p>
<p> </p>
<h3 id="VyhpD">嵌套可以很多层</h3>
<p>上面我们使用了两层嵌套。事实上，你深入嵌套多少层都没有限制。</p>
<p> </p>
<div id="JfJtT"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   “讲个故事，船长！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “好吧，你们这些海狗。 有个故事...”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        * *     “一个漆黑狂风暴雨的夜晚...”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">                * * *   “...船员们都很不安...”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">                        * * * *  “... 他们对船长说..."”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">                                * * * * *       “...给我们讲个故事，”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “不，已经过了你们睡觉的时间。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   作为一个人，船员们开始打起哈欠。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>这样下去，整个嵌套都会变得难以阅读或操作。因此，如果子选项变得笨拙，跳转到新针脚上是一种好习惯。</p>
<p>但至少在理论上，你可以把你整个故事都写成一个编织。</p>
<p> </p>
<p>再看一个更长的例子：</p>
<p> </p>
<div id="H2rwB"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- 我看着 Fogg 先生
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   ... 我再也控制不住自己了。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “先生，我们这次旅行的目的是什么？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “打赌，”他答道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * *     “打赌！”[]我回应道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            他点了点头。 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            * * *   “但这确实很蠢！”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            * * *   “这太糟了吧？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            - - -   他又点了点头。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            * * *       “可是我们能赢吗？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">                            “这正是我们要努力实现的。” 他回答道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            * * *       “我猜，赌注很明智？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">                            “两万英镑，”他回答得直截了当。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            * * *   我当时没在问他别的[]，他礼貌得咳嗽了一声，也没在对我说什么。 &lt;&gt;
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * *     “啊[。”]，” 我回应道，不确定我在想什么。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - -     之后， &lt;&gt;
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   ... 但我什么也没说[]。&lt;&gt; 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- 我们在沉默中度过了这一天。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- -&gt; END</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span class="lake-fontsize-12" style="font-size: 12px;">这里验证了之前的哲学：编织提供了一种紧凑的方式，在有大量分支大量选择的同时，故事依然能顺利的从头走到尾！</span></p>
<p><span class="lake-fontsize-12" style="font-size: 12px;"> </span></p>
<h2 id="jcdLX">2.3 编织定位 </h2>
<p>有时候只是编织结构就足够了，但有时我们还需要更多的控制权。</p>
<p>在默认情况下，编织中的内容没有地址或标签，这意味着它们不能被跳转到，也无法对其进行测试。在最基本的编织结构中，选项会改变玩家经历；可一旦走过编织，这些经历就会被遗忘。</p>
<p> </p>
<p>但如果我们想记录玩家的经历，我们可贴上“标签语法”<span class="lake-fontsize-11" style="font-size: 11px;">(label_name)</span>。</p>
<p> </p>
<h3 id="ABPo9">贴标签 (label_name)</h3>
<p>任何层嵌套的收束都可以使用括号贴标签。<code>-  (top)</code></p>
<p>贴上标签后，可以跳转至此或进行测试，就像结点和针脚一样。这意味着在编织中你可使用之前的语法来管理内容，同时保持清晰稳定的优点。</p>
<p>选项也可以用括号贴标签，就像收束一样。标签括号应位于条件之前。</p>
<p>这些地址也可用于条件测试中，这对测试“由其他选项解锁的选项”很有用。</p>
<p> </p>
<div id="TGGkU"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== meet_guard ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">卫兵在盯着你。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   (greet) [打招呼]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “早。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   (get_out) “让开[。”]，” 你对卫兵说。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   “嗯，”卫兵回应道。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   {greet}     “天气不错哈？” // 当你选打招呼
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   “咦？”[] 你回应道？
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   {get_out} [把他推到一旁]   // 当你威胁他时
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你把他推到一旁。作为礼尚往来，卫兵直接拔出了剑。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; fight_guard          // 跳出编织
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   “嗯。” 卫兵给你一个小纸袋。“太妃糖？”</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h3 id="7Q9Ra">范围</h3>
<p>在同一块编织内，你可只简单的写标签名称；到外面则需要写路径，像同个结点下的不同针脚：</p>
<p> </p>
<div id="M7QhH"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== knot ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= stitch_one 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - (gatherpoint) Some content.
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= stitch_two 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   {stitch_one.gatherpoint} Option</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>或到另一个结点：</p>
<p> </p>
<div id="Igtua"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== knot_one ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   (gather_one)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    * {knot_two.stitch_two.gather_two} Option
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== knot_two ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= stitch_two 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - (gather_two) 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        *   {knot_one.gather_one} Option</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h3 id="mdDNZ">更多技巧</h3>
<p>事实上，即使没有看到收束，INK 内的所有内容都是在编织中的。这意味着游戏中的所有选项都可贴标签，然后使用它的地址。特别的，这意味着你可以测试玩家为达到特定结果，选了哪个选项。</p>
<p> </p>
<div id="mz62Y"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== fight_guard ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">...
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= throw_something 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   (rock) [丢石头] -&gt; throw
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">* (sand) [扔沙子] -&gt; throw
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">= throw
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">你向卫兵扔了{throw_something.rock:一块石头|一把沙子}。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>我们能用贴标签创建内部循环，这是询问NPC的标准模式，<a href="https://inky-guard.netlify.com/" target="_blank" rel="noopener noreferrer">体验故事运行</a>。</p>
<p> </p>
<div id="g13Vi"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- (opts)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “我从哪能弄到制服吗？”[] 你询问快乐的卫兵。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “当然，在储物柜那。”他笑着说。 “不过可能不太合身。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “告诉我安防系统。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “他很老，” 卫兵向你保证。 “就像古董一样老。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   “这里的狗？”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “很多很多。” 卫兵答道，并咧嘴一笑。 “也都是饿鬼。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    //要求玩家至少问一个问题
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   {loop} [问够了] 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; done
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- (loop) // 在警卫厌烦前循环几圈
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    { -&gt; opts | -&gt; opts | } //序列可变文本控制卫兵是否厌烦
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    他挠挠头，
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “好吧，不能整天只站着说话。”他说到。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- (done)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你谢过警卫，便离开了。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>选项也可以被跳转到，就好像选择了该选项一样。因此，显示的内容会忽略 <code>[]</code> 中的文本，并如果该选项是一次性选项，它将被用掉。</p>
<p> </p>
<div id="0MC3K"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- (opts)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [做鬼脸]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你做鬼脸，士兵就冲你来了！ -&gt; shove
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   (shove) [把警卫推到一旁] 你把卫兵推到一旁，但他回来了。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   {shove} [进入战斗] -&gt; fight_the_guard
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   -&gt; opts</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>选项中可直接收束。注意下方第一个选项下二级收束并没其收束作用，而是方便第二个选项的跳转。</p>
<p> </p>
<div id="6KgVo"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   “还好吧，先生”[]我问。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - - (quitewell) “挺好的，”他答道。 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   “你填字游戏怎么样，先生？”[]我问。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; quitewell 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   我什么也没说[]，我的主人什么也没说。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   我们又感到了一次倍感亲切的沉默。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<div id="lkymI"    ><hr></div>
<blockquote>
<p>后面的内容较为复杂，本文只选取了部分简单的内容进行翻译。如有兴趣请浏览<a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
</blockquote>
<p> </p>
<h1 id="h34Xc">3. <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#part-3-variables-and-logic" target="_blank" rel="noopener noreferrer">变量与逻辑</a></h1>
<p>到目前为止，我们已经根据玩家看到的东西，做出了条件文本与条件选项。</p>
<p> </p>
<p>INK 还支持临时变量与全局变量，存储数字和内容数据，甚至故事流命令；逻辑功能也很齐全，并包含一些额外的结构，以帮助组织更复杂的故事结构。</p>
<h2 id="2HBtl">3.1 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#1-global-variables" target="_blank" rel="noopener noreferrer">全局变量</a> global variables</h2>
<p>最强大的变量，储存游戏某些独特状态属性的变量，对每个故事来说可能都最有用的——从主人公口袋里的钱，到主人公精神状态的SAN值。</p>
<p><span class="lake-fontsize-12" style="font-size: 12px;"><br></span>这种变量称为全局变量（<code>global variables</code>），因为可以从故事中的任何位置访问（包括设置和读取）它。（传统情况下，编程会试图避免这种情况，因为它可能会相互冲突。但故事有所不同，有一些事物贯穿始终，全局需要并一直存在。 ）</p>
<p> </p>
<p>全局变量可以通过语句 <span class="lake-fontsize-11" style="font-size: 11px;">VAR</span> 定义在任何地方。给它们指定一个初始值，定义它们是哪种类型的变量：整数、浮点（十进制）、内容或故事的地址。</p>
<p> </p>
<div id="6DidE"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">VAR knowledge_of_the_cure = false
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">VAR players_name = "Emilia"
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">VAR number_of_infected_people = 521
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">VAR current_epilogue = -&gt; they_all_die_of_the_plague</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>我们可以控制全局变量以控制选项，并控制条件文本。方式与之前看到的类似。</p>
<p> </p>
<div id="gZGyI"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== the_train ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    火车颠簸了一下。 { mood &gt; 0:我觉得还好，没介意奇怪的颠簸|这超出了我所能承受的}。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   { not knows_about_wager } “但是，先生，我们为什么要旅行？”[] 我问道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   { knows_about_wager} 我考虑了我们有些离奇的冒险[]。这可能吗？</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span class="lake-fontsize-12" style="font-size: 12px;">变量的值可用类似于序列和条件文本的语法显示出来，这在调试时也很有用：</span></p>
<p> </p>
<div id="dbYJV"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">VAR friendly_name_of_player = "Jackie"
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">VAR age = 23
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">我叫 Jean Passepartout，但朋友都叫我 {friendly_name_of_player}。 我{age}岁了。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>你可能注意到，上面我们将变量称为能够包含“内容”而非“字符串”。这是有意的，因为在 INK 中定义的字符串能包含 INK ，尽管它始终会计算为字符串（很赞）。</p>
<p> </p>
<div id="fveFA"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">VAR a_colour = ""
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">~ a_colour = "{~红色|蓝色|绿色|黄色}" 
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">{a_colour} </span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>输出“红色，蓝色，绿色或黄色”中的一种颜色。注意，一旦输出了这样的内容，其值就是“确定的”。（量子状态崩溃。）因此，下面内容不会产生有趣的效果。（如果你希望这样做，请使用可变文本！）</p>
<p> </p>
<div id="JYyBF"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">呆子撞到了你，你眼冒金星， {a_colour}和{a_colour}闪烁。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574253169542-a6dd40b9-9eb0-4009-9398-37531144947c.png" alt="image.png"  ></span></p>
<p> </p>
<p>这也是为什么 <code>VAR a_colour = "{~red|blue|green|yellow}"</code> 是不推荐的，它会影响到你的整个游戏。</p>
<p> </p>
<h2 id="9NAjD">3.2 逻辑运算 logic</h2>
<p>显然，我们的全局变量并非为常量，因此我们需要一种语法来改变它们。</p>
<p>默认情况下，INK 中的任何文本都直接显示到屏幕上。因此我们用 <code>~</code> 来标记表示某行是在进行数值工作。</p>
<p> </p>
<p><span class="lake-fontsize-12" style="font-size: 12px;">以下均是为变量分配值：</span></p>
<p><span class="lake-fontsize-12" style="font-size: 12px;"> </span></p>
<div id="EmPpC"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== set_some_variables ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ knows_about_wager = true  
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ x = (x * x) - (y * y) + c
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ y = 2 * x * y</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>以下是测试用的条件：</p>
<p> </p>
<div id="o7BB1"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ x == 1.2 }
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ x / 2 &gt; 4 }
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ y - 1 &lt;= x * x }</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>INK 支持数学四则运算（<code>+</code>，<code>-</code>，<code>*</code>和<code>/</code>），以及 <span class="lake-fontsize-11" style="font-size: 11px;">%</span> （或 <code>mod</code> ）进行求余。还支持 <code>POW</code> （幂）运算：</p>
<p> </p>
<div id="CWDq0"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{POW(3, 2)} is 9. 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{POW(16, 0.5)} is 4. </span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>还可以用 <code>RANDOM</code> 函数来生成随机整数。RANDOM 就像掷骰子，因此最小值和最大值都包括在内。（ <code>temp</code> 为<a href="#A1UDf">临时变量</a>）</p>
<p> </p>
<div id="knr4f"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">~ temp dice_roll = RANDOM(1, 6) 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">~ temp lazy_grading_for_test_paper = RANDOM(30, 75)  
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">~ temp number_of_heads_the_serpent_has = RANDOM(3, 8)</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>可用上文的 <a href="#P9O3i">SEED_RANDOM()</a> 进行测试。</p>
<p> </p>
<p>INK 作为文字游戏引擎，奇怪的是并没有那么多字符串查询（string queries）方式。这有三种基本查询，相等，不相等和子字符串。以下全部返回 true：</p>
<p> </p>
<div id="FASjE"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ "Yes, please." == "Yes, please." }
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ "No, thank you." != "Yes, please." }
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ "Yes, please" ? "ease" }</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h2 id="lrtZc">3.3 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#3-conditional-blocks-ifelse" target="_blank" rel="noopener noreferrer">条件块</a> if/else</h2>
<p>我们已经看到了用于控制选项和故事内容的条件内容，而 <code>ink</code> 还提供了与常规 <code>if/else - if/else</code> 结构等效的功能。</p>
<p> </p>
<p>单纯使用 <code>if</code> —— 简单而有效的判断：</p>
<p><code>if</code> 语法的判断条件，是从开始到现在为止产生的条件线索，而 <code>{</code>... <code>}</code> 语法表示正在测试某些内容。</p>
<p> </p>
<div id="3As7x"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ x &gt; 0:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ y = x -1
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>或者加上其他条件 <code>else</code> :</p>
<p> </p>
<div id="IJLuF"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ x &gt; 0:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ y = x - 1
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- else:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ y = x + 1
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>扩展 <code>if/else - if/else</code> 条件块：</p>
<p>上面的语法也可更改形式为另一种结构方式，类似于编程语言中的 <code>switch</code> 语句格式。</p>
<p> </p>
<div id="kEGMb"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - x &gt; 0:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        ~ y = x - 1
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - else:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        ~ y = x + 1
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>在此格式基础之上进一步拓展，我们还可以实现 <code>else-if</code> 形式的条件判断：</p>
<p> </p>
<div id="tTKJY"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - x == 0:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ y = 0
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - x &gt; 0:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        ~ y = x - 1
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - else:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        ~ y = x + 1
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span class="lake-fontsize-11" style="font-size: 11px;">（请注意，与其他所有内容一样，空格仅出于</span><span class="lake-fontsize-11" style="font-size: 11px;">可读性考虑，没有语法含义。）</span></p>
<p><span class="lake-fontsize-12" style="font-size: 12px;"> </span></p>
<p><strong>Switch Block （开关座：选择性判断语句）：</strong></p>
<p>实际上 ink 的确有和其他编程语言中 <code>switch</code> 类似的语句。</p>
<p> </p>
<div id="Lt6m6"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ x:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - 0:    zero
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - 1:    one
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">  - 2:  two
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">  - else:   lots
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><strong>示例：关联上下文内容</strong></p>
<p>请注意，这里的判断条件除了可以使用变量之外，还可以使用玩家是否经历过结点作为条件，并且这种条件使用频繁，例如要做一些与当前游戏状态相关的内容：</p>
<p> </p>
<div id="WiNjN"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== dream ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    {
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        - visited_snakes &amp;&amp; not dream_about_snakes:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            ~ fear++
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            -&gt; dream_about_snakes
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">        - visited_poland &amp;&amp; not dream_about_polish_beer:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            ~ fear--
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            -&gt; dream_about_polish_beer 
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">        - else:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            // 清晨的梦只是梦境
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">            -&gt; dream_about_marmalade
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    }</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>此语法具有易于拓展的优势，优先选择使用此语法。</p>
<p> </p>
<p><strong>条件块中不仅限于逻辑运算</strong></p>
<p>条件块可以用于控制故事内容以及发展走向：</p>
<p> </p>
<div id="jg8ib"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我望着 Fogg 先生。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ know_about_wager:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    &lt;&gt; “但你一定不是认真的吧？” 我诧异道。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- else:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    &lt;&gt; “但这次旅行一定是有一个原因，”我说。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">他什么也没有回答，只是像昆虫学家研究他最新的发现那样，一丝不苟地研究他的报纸。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>你甚至可以将选项放在条件块中：</p>
<p> </p>
<div id="JEdC7"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ door_open:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   我大步走出车厢 [] 并且我仿佛听见我的主人在低声地自言自语。             -&gt; go_outside 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- else:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *       我请求离开 [] 并且 Fogg 先生显得很惊奇。   -&gt; open_door 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    *   我站起来打开了门 [] 。Fogg 先生似乎对这种小小的反抗并没有感到不安。 -&gt; open_door
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>但是请注意，上面的示例中没有出现编织语法和嵌套语法不是偶然：为了避免嵌套带来的内容混淆，不允许在条件块中加入 <code>gathers</code> 收束点。</p>
<p> </p>
<p><strong>实现多种特殊功能的多行块 Multiline blocks</strong></p>
<p>它们是另一种特殊的代码块，可以分别实现不同的功能：</p>
<p> </p>
<div id="x2yXp"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">// 顺序执行：根据每次的跳转依次执行，全部执行后持续执行显示最后一行
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ stopping:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   我进入了赌场。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   我又一次进入了赌场。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   我又一次走了进去。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">// 随机洗牌：随机显示执行其中一行
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">在桌子上，我画了一张卡片。 &lt;&gt;
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ shuffle:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   红心王牌。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   黑桃王牌。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   方块2。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        “你这次输了！”赌场庄家欢叫着。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">// 循环执行：顺序显示执行，并循环如此
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ cycle:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   我屏住呼吸。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   我不耐烦地等着。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   我停顿了一下。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">// 一次执行：顺序显示执行，每个分支只显示执行一次，全部显示执行后不再显示执行
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ once:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   我的运气好吗？
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   我能赢吗？
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="Multiline_blocks.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/447250/1575183925923-4d586d7c-a2e8-438f-af60-02521431da76.gif" alt="Multiline_blocks.gif"  ></span></p>
<p> </p>
<p><strong>高级：修改的随机洗牌</strong></p>
<p>上面的随机洗牌，实际上是 <code>shuffle cycle</code> 循环随机洗牌；它每次随机选择内容，显示内容，然后重新随机显示内容，显示内容。</p>
<p>随机洗牌还有两种方式：</p>
<p><code>shuffle once</code> 随机显示执行内容，只显示执行一次，之后不会再执行</p>
<p> </p>
<div id="TJyDM"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ shuffle once: 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   太阳很晒。 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - 天气很热。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><code>shuffle stopping</code> 随机显示执行内容（最后一条除外），当其他项全部随机执行完毕后，将一直保持在最后一条</p>
<p> </p>
<div id="mxvsp"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ shuffle stopping:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - 一辆银色宝马车呼啸而过。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   一辆亮黄色的野马车在转弯。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - 这里有很多车。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<h2 id="A1UDf">3.4 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#4-temporary-variables" target="_blank" rel="noopener noreferrer">临时变量</a> Temporary Variables</h2>
<p><strong>临时变量用于临时计算</strong></p>
<p>有时，全局变量无法满足我们的临时需求，这时候 ink 为我们提供了临时变量 <code>Temporary Variables</code> 。</p>
<p> </p>
<div id="jraqq"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== near_north_pole ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ temp number_of_warm_things = 0
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    { blanket:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        ~ number_of_warm_things++
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    }
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    { ear_muffs:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        ~ number_of_warm_things++
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    }
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    { gloves:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        ~ number_of_warm_things++
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    }
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    { number_of_warm_things &gt; 2:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        尽管下雪了，但我还是感到无比舒适。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - else:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        那天晚上我感觉比以往任何时候都冷。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    }</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>临时变量只在其定义的当前结点生效，离开结点后临时变量将被丢弃。</p>
<p> </p>
<p><strong>结点和针脚可以拥有参数</strong></p>
<p> </p>
<p>临时变量有一种非常实用的形式，就是作为传递给任意结点或针脚的一个参数。</p>
<p> </p>
<div id="MMFjx"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [Accuse Hasting]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; accuse("Hastings")
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [Accuse Mrs Black]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; accuse("Claudia")
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   [Accuse myself] 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; accuse("myself")
</span></span>        
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== accuse(who) ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    "我控诉 {who}!" 波洛宣布。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “真的吗？” Japp 回道。 “{who == "myself":你要这么做？|{who}？}”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “为什么不可以？” 波洛回击道。 </span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>如果要将临时变量从一个针脚传递给另一个针脚，就要用参数。</p>
<p> </p>
<p><strong>示例：递归节点中的定义</strong></p>
<p>临时变量可以放心的在递归中使用（与全局变量不同，全局变量改变后递归过程中都会变为改变后的值），因此可以执行下面的内容：</p>
<p> </p>
<div id="CkaU2"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; add_one_to_one_hundred(0, 1)
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== add_one_to_one_hundred(total, x) ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ~ total = total + x
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    { x == 100:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; finished(total)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    - else:
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; add_one_to_one_hundred(total, x + 1)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    }   
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== finished(total) ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “结果是 {total}！” 你宣布。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    高斯惊恐地盯着你。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; END</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>实际上，这种递归节点中的定义非常实用，也因此 <code>ink</code> 中提供了一种特殊的结点，一个 <code>function</code> 。它有一定的限制，并且可以返回一个值，请参阅以下部分。</p>
<p> </p>
<p><strong>高级：将 </strong><strong><code>divert targets</code></strong><strong> （跳转目标）作为参数传递</strong></p>
<p>结点、针脚的地址也是一种类型的值，用 <code>-&gt;</code> 符号表示，可以传递与存储。因此以下的内容是正常的，并且非常有用：</p>
<p> </p>
<div id="7gGuS"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== sleeping_in_hut ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你躺下闭上了眼睛。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; generic_sleep (-&gt; waking_in_the_hut)
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">===  generic_sleep (-&gt; waking)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你偶尔会做梦之类的。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; waking
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== waking_in_the_hut
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你重新站起来，准备继续你的旅程。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>要注意的是，在 <code>generic_sleep</code> 的定义中，是有 <code>-&gt;</code> 符号存在的。因为这里是作为一个参数值存在，如果不加 <code>-&gt;</code> 符号，就会变成下面这样：</p>
<p> </p>
<div id="A8saQ"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== sleeping_in_hut ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你躺下闭上了眼睛。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; generic_sleep (waking_in_the_hut)</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>这种情况下， <code>ink</code> 会将 <code>waking_in_the_hut</code> 的结点数字传递给 <code>sleeping</code> 结点，并且尝试跳转到此结点。</p>
<p> </p>
<h2 id="Sq6x3">3.5 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#5-functions" target="_blank" rel="noopener noreferrer">函数</a> Functions</h2>
<h2 id="KQYr4">3.6<a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#4-temporary-variables" target="_blank" rel="noopener noreferrer"> 常数</a> Constants</h2>
<p> </p>
<div id="mSNNL"    ><hr></div>
<h2 id="4J3zl">4.1 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#1-tunnels" target="_blank" rel="noopener noreferrer">隧道</a>（？）tunnels</h2>
<blockquote>
<p>狼也不知道这里 <code>tunnels</code> 翻译成什么更恰当。无端的想起马里奥中可以往返隐藏区域的“管道”。但最后决定还是直译成了“隧道”。</p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574257344388-5e62b910-d25d-4320-9e05-0efcb7af7aed.png" alt="image.png"  ></span></p>
</blockquote>
<p> </p>
<p>INK 故事的默认结构是“扁平”的树状结构，分支又重新收束回一起，也许还有循环，但故事始终位于“某个位置”。</p>
<p> </p>
<p>但是这种扁平结构会使某些事情变得困难：想象一个游戏，可能发生以下的相互作用：</p>
<p> </p>
<div id="Osn87"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== crossing_the_date_line ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   “先生！”[] 我突然感到震惊。"我才意识到，我们已经穿过了国际日期变更线！"
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   Fogg 先生轻轻抬起了眉毛。“我已经调整过了。”
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   我擦了擦额头上的汗水[]。松了口气！
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">* 我轻轻的点头[]。他当然会做的。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">* 我在心里抱怨[]。 我又被小看了一次。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>...但它可能发生在故事中的几个不同地方。我不想为不同的地方写相同内容，但是当内容完成后，它还需要知道返回到哪里。我们可以使用参数来做到这一点：</p>
<p> </p>
<div id="ySbVC"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== crossing_the_date_line(-&gt; return_to) ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">...
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-       -&gt; return_to 
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">...
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== outside_honolulu ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我们到了Honolulu 最大的岛。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- (postscript) 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; crossing_the_date_line(-&gt; done)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- (done)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; END 
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">...
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== outside_pitcairn_island ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">船在水上驶向小岛。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- (postscript) 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; crossing_the_date_line(-&gt; done)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">- (done)
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; END </span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>这两个位置都调用并执行相同的故事片段，一旦完成，它们就会回到下一步要去的地方。</p>
<p> </p>
<p>但如果这个“故事的部分”更复杂怎么办？如果跨越多个结点怎么办？使用上面的方法，我们必须不断地将“ return-to”参数从一个结点传递到另一个结点，以确保我们始终知道该返回的位置。</p>
<p>因此，INK 把跳转和新功能结合到起来加语言中，其功能类似于子程序，称为"隧道"（tunnels）。</p>
<p> </p>
<p>隧道的语法看起来很像跳转，末尾还有另一个跳转：</p>
<p> </p>
<div id="7xzI6"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; crossing_the_date_line -&gt;</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>这意味着运行一个“crossing_the_date_line 的故事”，然后从这继续。</p>
<p>在隧道内部，语法展示进行了简化：用 <code>-&gt;-&gt;</code> 语句结束隧道，实质上意味着“继续”。</p>
<p> </p>
<div id="B9PbI"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== crossing_the_date_line === 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">// 这里是隧道！
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">...
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-   -&gt;-&gt;</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>注意，隧道结点和普通的结点不同，编译器将不会检查隧道是否真的以“-&gt;-&gt;”语句结尾，除非在运行时。因此，您需要仔检查进出隧道的跳转。</p>
<p> </p>
<p>隧道可串在一起，也可在普通跳转上：</p>
<p> </p>
<div id="rJE1V"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">... 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">// 这里运行了隧道，然后跳转到 done
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; crossing_the_date_line -&gt; done
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">...
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">... 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">//这里运行了第一个隧道，第二个隧道，然后跳转到 done
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; crossing_the_date_line -&gt; check_foggs_health -&gt; done
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">...</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>隧道可以嵌套，因此以下内容也行：</p>
<p> </p>
<div id="hjSeL"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== plains ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= night_time 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    脚边是深色柔软的草丛。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    +   [休息]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; sleep_here -&gt; wake_here -&gt; day_time
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">= day_time 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    到了该动身的时间了。
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== wake_here ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你随太阳一同醒来。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    +   [吃些东西]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        -&gt; eat_something -&gt;
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    +   [该动身了]
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -   -&gt;-&gt;
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== sleep_here ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    你躺下并闭上双眼。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; monster_attacks -&gt; 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    接着该睡觉了。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; dream -&gt;
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt;-&gt;</span></span></pre>
</div>
</div>
</div>
<p> </p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>发布到网页</title>
        <author>
            <name>Legacy</name>
        </author>
        <link href="https://fur2.now.sh/fa-bu-dao-wang-ye/"/>
        <id>https://fur2.now.sh/fa-bu-dao-wang-ye/</id>

        <updated>2020-01-18T17:13:31+08:00</updated>
            <summary>
                <![CDATA[
                    发布到网页*原文此部分介绍的是发布到 itch.io ，但好消息是，你几乎可以把 Inky 导出的 Web 托管到任何可以放静态网页的地方，如 netlify，github page，coding…… 和你的服务器上。 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="5kiy3">发布到网页*</h1>
<p>原文此部分介绍的是发布到 <code>itch.io</code> ，但好消息是，你几乎可以把 Inky 导出的 Web 托管到任何可以放静态网页的地方，如 netlify，github page，coding…… 和你的服务器上。</p>
<p> </p>
<h2 id="o2sd4">Netlify*</h2>
<ol start="1">
<li>注册 <a href="https://app.netlify.com/" target="_blank" rel="noopener noreferrer">netlify</a> ；</li>
<li>将你的故事文件夹拖动到“Want to deploy a new site without connecting to Git?Drag and drop your site folder here”的框里。显示绿色的发布网址后，即发布成功，点击网址访问你的故事。</li>
</ol>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>进阶文档</title>
        <author>
            <name>Legacy</name>
        </author>
        <link href="https://fur2.now.sh/jin-jie-wen-dang/"/>
        <id>https://fur2.now.sh/jin-jie-wen-dang/</id>

        <updated>2020-01-18T17:22:40+08:00</updated>
            <summary>
                <![CDATA[
                     原文此部分介绍的是发布到 itch.io ，但好消息是，你几乎可以把 Inky 导出的 Web 托管到任何可以放静态网页的地方，如 netlify，github page，coding…… 和你的服务器上。 看一下我们刚发布的 example 。 将网页打包成安装包是件很容易的事。 你可尝试用 HBuilderX 创建“5+App”项目进行云打包，这里不再赘述了。 另一种思路，也可以选择创建“Wap2App”项目，将托管的网页设成“wap站首页地址”，更新与打包更容易些。 为网页插入评论系统里是容易的，同理为 Inky 生成的网页插入评论系统也是容易的。 这里有一个将 Gitlak 评论系统插入的 例子，点我运行体验。 当然如果你愿意，甚至还能插入 DaoVoice 这样的客服系统。 想知道有多少人玩，最简单的方式就是插入统计代码。方法和插入到网页一样，这里不再赘述了。 你已经完成了你的杰作！是时候与世界分享它了。 你可以选择将文件上传到允许你托管网页的任何地方，但我们建议 itch.io，因为它是一个拥有独立游戏开发者的伟大社区，它是少数几个允许你上传纯&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="RFLqQ"> </h1>
<p>原文此部分介绍的是发布到 <code>itch.io</code> ，但好消息是，你几乎可以把 Inky 导出的 Web 托管到任何可以放静态网页的地方，如 netlify，github page，coding…… 和你的服务器上。</p>
<p> </p>
<h2 id="o2sd4">Netlify*</h2>
<ol start="1">
<li>注册 <a href="https://app.netlify.com/" target="_blank" rel="noopener noreferrer">netlify</a> ；</li>
<li>将你的故事文件夹拖动到“Want to deploy a new site without connecting to Git?Drag and drop your site folder here”的框里。显示绿色的发布网址后，即发布成功，点击网址访问你的故事。</li>
</ol>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="7.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/262531/1574053609287-4409cb8a-344d-44e3-ac5f-25444a6c39a0.gif" alt="7.gif"  ></span></p>
<p> </p>
<ol start="3">
<li>点击 Domain Setting ，可修改你故事的网址。</li>
</ol>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="8.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/262531/1574054000386-e5e3b045-8a56-4ff0-83f2-bae3b0af693c.gif" alt="8.gif"  ></span></p>
<p> </p>
<ol start="4">
<li>如需更新故事，选择 Depolys ，将更新后的文件夹拖入框里即可。（事实上，你一开始也可以通过连接Github，完成全自动的更新发布，这里不再赘述了。)</li>
</ol>
<p> </p>
<p>看一下我们刚发布的 <a href="https://inky-example.netlify.com/" target="_blank" rel="noopener noreferrer">example</a> 。<span    ><img class="image lake-drag-image" src="https://cdn.nlark.com/yuque/0/2019/svg/262531/1574054336160-43d81bb4-054b-40ef-aa7d-97ce369fdec3.svg"  ></span></p>
<p> </p>
<h2 id="V22ir">App*</h2>
<p>将网页打包成安装包是件很容易的事。</p>
<p>你可尝试用 <a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener noreferrer">HBuilderX</a> 创建“5+App”项目进行云打包，这里不再赘述了。</p>
<p>另一种思路，也可以选择创建“Wap2App”项目，将托管的网页设成“wap站首页地址”，更新与打包更容易些。</p>
<p> </p>
<h2 id="DwDp2">评论系统*</h2>
<p>为网页插入评论系统里是容易的，同理为 Inky 生成的网页插入评论系统也是容易的。</p>
<p>这里有一个将 <a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener noreferrer">Gitlak</a> 评论系统插入的 <a href="https://github.com/volfclub/inkytalk" target="_blank" rel="noopener noreferrer">例子</a>，<a href="https://inky-gitalk.netlify.com/" target="_blank" rel="noopener noreferrer">点我运行体验</a>。</p>
<p>当然如果你愿意，甚至还能插入 <a href="http://www.daovoice.io/" target="_blank" rel="noopener noreferrer">DaoVoice</a> 这样的客服系统。</p>
<p> </p>
<h2 id="dAsS1">统计代码*</h2>
<p>想知道有多少人玩，最简单的方式就是插入统计代码。方法和插入到网页一样，这里不再赘述了。</p>
<p> </p>
<h2 id="WyqMs">itch.io</h2>
<p>你已经完成了你的杰作！是时候与世界分享它了。</p>
<p>你可以选择将文件上传到允许你托管网页的任何地方，但我们建议 <strong>itch.io，</strong>因为它是一个拥有独立游戏开发者的伟大社区，它是少数几个允许你上传纯 Web 内容的地方之一，最重要的是，它是免费的！如果你愿意，你甚至可以选择出售你的内容。</p>
<p>itch.io 还允许你上传游戏内容为私有草稿，以便在发布之前测试该过程。</p>
<p>最后，<a href="https://itch.io/jam/inkjam" target="_blank" rel="noopener noreferrer">Inkjam</a> 是从 itch.io 托管的，如果你已经将游戏上传到平台上，就可以轻松加入。</p>
<p> </p>
<p>首先，如果你尚未 <a href="https://itch.io/register" target="_blank" rel="noopener noreferrer">注册帐户，请在此处注册</a>。然后：</p>
<ul>
<li>从 <a href="https://itch.io/dashboard" target="_blank" rel="noopener noreferrer">仪表板</a> 中选择"创建新项目"。</li>
<li>输入游戏/故事的详细信息，确保为项目类型选择"HTML"。</li>
<li>压缩从 inky 导出的所有文件并上传它们。</li>
<li>选择"此文件将在浏览器中播放"。</li>
<li>嵌入：我们建议你尝试此设置，以查看你喜欢的内容。</li>
<li>大小：我们建议 800 x 600 更适合阅读文本，而不是默认大小。对于移动设备来说，它仍然会缩小。</li>
<li>移动友好：是</li>
<li>自动启动：我们建议你试试它，并决定你喜欢什么。</li>
<li>全屏按钮：我们建议是的，但由你决定。</li>
<li>启用滚动条：由于模板内置了滚动，因此没有必要这样做。</li>
</ul>
<p> </p>
<p>你可在“查看和访问”下选择“草稿”，预览你的游戏。一旦你准备好把游戏发布，只需选择“公共”。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>适合初学者！</title>
        <author>
            <name>Legacy</name>
        </author>
        <link href="https://fur2.now.sh/gua-he-chu-xue-zhe/"/>
        <id>https://fur2.now.sh/gua-he-chu-xue-zhe/</id>

        <updated>2020-01-18T17:03:48+08:00</updated>
            <summary>
                <![CDATA[
                    才疏学浅，欢迎指正。标*内容为译者增添，可略过。 希望大家都能像写 Markdown 一样，轻松写出互动小说。 个人建议：简单学习基础部分，认真看下“编织”部分，粗略看下高阶部分。 本文修改自 https://www.inklestudios.com/ink/web-tutorial 编写互动小说从未如此简单，因为我们有很多可用的创作工具。Twine 因其对用户友好，用其可视化的"贴便笺与字符串"来规划故事，因此在创作基于 Web 的互动小说中很受欢迎。 相比之下，INK 最初不是为 Web 设计的工具，它被设计成集成到传统的游戏引擎中的插件。在 Inkle，我们几乎把它用于我们所创造的一切，从 80 Days（最初为移动端）到即将到来的 Heaven’s Vault 的PS4与PC版。由于我们的开源，它也被用于一系列受人瞩目的独立游戏，像 Bury Me My Love 和 Where the Water Tastes Like Wine，两者都在2018年被&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <blockquote>
<p>才疏学浅，欢迎指正。标*内容为译者增添，可略过。</p>
<p>希望大家都能像写 Markdown 一样，轻松写出互动小说。</p>
<p>个人建议：简单学习基础部分，认真看下“编织”部分，粗略看下高阶部分。</p>
<p> </p>
<p>本文修改自 <a href="https://www.inklestudios.com/ink/web-tutorial/" target="_blank" rel="noopener noreferrer">https://www.inklestudios.com/ink/web-tutorial</a></p>
</blockquote>
<p> </p>
<h1 id="uDtnZ">适合初学者！</h1>
<p>编写互动小说从未如此简单，因为我们有很多可用的创作工具。Twine 因其对用户友好，用其可视化的"贴便笺与字符串"来规划故事，因此在创作基于 Web 的互动小说中很受欢迎。</p>
<p>相比之下，INK 最初不是为 Web 设计的工具，它被设计成集成到传统的游戏引擎中的插件。在 Inkle，我们几乎把它用于我们所创造的一切，从 <a href="https://www.inklestudios.com/80days" target="_blank" rel="noopener noreferrer">80 Days</a>（最初为移动端）到即将到来的 <a href="https://www.inklestudios.com/heavensvault" target="_blank" rel="noopener noreferrer">Heaven’s Vault</a> 的PS4与PC版。由于我们的开源，它也被用于一系列受人瞩目的独立游戏，像 <a href="http://burymemylove.arte.tv/" target="_blank" rel="noopener noreferrer">Bury Me My Love</a> 和 <a href="https://www.wherethewatertasteslikewine.com/" target="_blank" rel="noopener noreferrer">Where the Water Tastes Like Wine</a>，两者都在2018年被  IGFs 提名。</p>
<p><span    ><img class="image lake-drag-image" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573979803577-c26ce704-9392-4cc2-8c5e-9ffda41700b8.png"  ></span></p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="15742487653940.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574248791396-592b3440-0196-4799-a0c0-7cdee4fea09f.png" alt="15742487653940.png"  ></span></p>
<p> </p>
<p>但是用 INK 为 Web 写故事是<strong>很容易的</strong>！到目前为止，缺少的是一个简单的教程，提供了用 INK 写故事的方法，将其发布到网络上并供人浏览基础知识。</p>
<p> </p>
<p><strong>本教程假定你对 INK 或 Web 技术的经验知识为零</strong>，缺乏技术的作者能从这拥有入门所需的一切。但如果你希望深入了解某个主题，我们将在整个过程中随时提供切入点。</p>
<p>下面是本教程大致的主体。随意跳过或浏览你已熟悉的任何主题：</p>
<ul>
<li>上手 INK ：下载工具并编写一个简单的故事。</li>
<li>导出为 Web - 如何为你的故事创建可共享网页。</li>
<li>可选：自定义页面的外观，包括 CSS 基础知识的说明。</li>
<li>发布到网页*：上传你的作品到供他人游玩的完美场所。</li>
</ul>
<p> </p>
<div id="LsTWt"    ><hr></div>
<p> </p>
<h1 id="oEkBy">INK 入门</h1>
<p>这有一个 <a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md" target="_blank" rel="noopener noreferrer">官方文档</a>，告诉你关于 INK 所有需要知道的，从基础知识到复杂强大的结构。</p>
<p>但本指南将略过这些，指出其中最容易理解的功能，以便你能上手编写一个简单的故事。当然，如果你想尝试更高级的内容，请随时进入官方文档。</p>
<p> </p>
<h2 id="KAz5e">下载 Inky</h2>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="Inky.exe(1)1.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573979720553-2a82b83f-ea51-44e4-bac2-4a6756704f64.png" alt="Inky.exe(1)1.png"  ></span></p>
<p> </p>
<p>我们将用 <strong>Inky </strong>编写——用于创作 INK 脚本的官方编辑器。所以，请继续前进，<a href="https://github.com/inkle/inky/releases" target="_blank" rel="noopener noreferrer"><strong>并点击这里下载它！</strong></a>支持Widows、Mac、Linux（如果你习惯 VS code *，也有用于支持编辑 INK 的插件）。</p>
<p> </p>
<p>启动它时，你将看到一个双栏窗口。左侧编写故事，右侧可预览故事的运行。</p>
<p>首先要了解 INK，从本质上讲，它只是纯文本，并带有特殊的注释（“标记”）使其具有交互性。所以请继续，在左侧试着写一个句子，你会看到它出现在右边的预览区。也可以试着写多个段落看看。</p>
<p> </p>
<p><strong>重要</strong>*，写作时记得经常保存项目（Save Project），以防发生意外造成不必要的损失。</p>
<p> </p>
<div id="3HkrE"    ><hr></div>
<p> </p>
<h1 id="AsDjN">举个例子</h1>
<p>现在，让我们看门见山，来看一个简单的故事示例。</p>
<p>若你以前从未接触过编程（很多符号！），下方截屏中的蓝色标记最初可能让人望而生畏。但我们会逐步介绍它们，以便你了解它们的组合方式。</p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573979027210-d014aced-9bcd-4900-a14e-992eda5e37f2.png" alt="image.png"  ></span></p>
<p> </p>
<p>请将下方内容复制到 Inky 的左栏中，然后在右栏中预览。右上角的单箭头是<strong>后退</strong>，双箭头是<strong>重置</strong>预览的故事。</p>
<p> </p>
<div id="zevc9"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">伦敦，1872年
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">Phileas Fogg 先生的住所。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; london
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== london === //这是节点
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">Phileas Fogg 先生早早从改革俱乐部回到了家，并乘坐了新型的蒸汽运输机！   
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“领航,” 他喊到。 "我们去环游世界！"
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ “环游世界，先生？” 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    我大吃一惊。
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; astonished
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ [点头。] -&gt; nod
</span></span>

<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== astonished ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“你在开玩笑！” 我认真地对他说。“你一定是在和我开玩笑，先生。” 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“我很认真。” 
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ “好吧。”
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; ending
</span></span>

<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== nod ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我点了点头，但不相信一个字。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; ending
</span></span>

<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== ending //这也是节点
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content"># CLASS: end
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“我们将在八十天内环游地球。” 他很平静地提出了这个近乎疯狂地计划“我们8:25去巴黎。一小时后。”
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; END
</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>预览时，调整左栏的内容，右栏预览也会实时更新，即使你正处于故事中。你甚至可以点击右栏中的某个单词，它会选中左栏中的源文本（当故事变得非常复杂时，这非常有用！）。你也可以先看这个故事，用默认模板发布到到网页的效果，<a href="https://inky-example.netlify.com/" target="_blank" rel="noopener noreferrer">点我运行体验</a>。</p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574394256758-a0a19c80-c679-4253-b449-4c0571065f68.png" alt="image.png"  ></span></p>
<p> </p>
<h3 id="q9r7A">学会注释*</h3>
<p>好记性不如烂笔头。你可以在任何地方，用 <code>//</code> ，或 <code>/* …… */</code> 帮你插入注释，记住你想记住的东西，避免一觉醒来就忘记“这是什么东西”。注释内容不会在故事运行时显示给玩家，也不会影响周围的其他内容。</p>
<p> </p>
<div id="lSO6f"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“你怎么看？” 她问。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">// 一行注释
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">“我无法评论，”我答。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">/*
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    ……或者一段注释
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">*/</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>还有一种更强的注释 <code>TODO: </code>，帮你提醒要做什么。</p>
<p><code>TODO: 认真写这一节！</code></p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573991366205-6cf1add7-6cca-40d2-ad5c-33cfc7196ae2.png" alt="image.png"  ></span></p>
<p> </p>
<p>在这个简单的故事中，你只需要简单的了解三个部分：<strong>结点</strong>、<strong>跳转</strong>和<strong>选项</strong>。</p>
<p> </p>
<h2 id="K5XSU">1. 结点 knots</h2>
<p>故事是由多个相互链接的部分构成的，在 INK 中我们称其为结点（knots）。结点名称的<strong>左侧</strong><strong>至少</strong><strong>需要两个等号</strong>（<code>==</code>）进行标记，右侧的则是可选的（例如 <code>=== london ===</code>）。Inky 中会用蓝色突出显示已识别的标记，提示书写正确，并与其他内容区分。结点标记下面的内容都属于这个结点。</p>
<p> </p>
<div id="JGrn6"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== london === //这是节点
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">Phileas Fogg 先生早早从改革俱乐部回到了家，并乘坐了新型的蒸汽运输机！   
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“领航,” 他喊到。 “我们去环游世界！”</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573976398199-ecdc40f2-65b8-4e86-9c32-99b00db7c27a.png" alt="image.png"  ></span></p>
<p> </p>
<p>结点的名称（<strong>不能有空格、中文</strong>）不会在运行故事时显示。</p>
<p>而当我们想要把不同部分链接的在一起时，会用到它们。</p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573974175692-2bad0e25-335b-4c6c-8bb6-ed376cde3f27.png" alt="image.png"  ></span></p>
<p> </p>
<h2 id="b6wBM">2. 跳转 divert</h2>
<p>现在谈谈链接，我们称之为跳转（divert）。<code>-&gt; london</code></p>
<p>使用<strong>跳转箭头</strong>（输入"减"与"右尖括号"），告诉故事去另一个结点。运行故事时，跳转是自动的且不会显示给玩家。</p>
<p>因此，在故事的开头，显示了介绍性段落之后，就有 <code>-&gt; london</code> 的跳转，可将玩家直接跳入该名称的结点中。</p>
<p> </p>
<div id="gmADg"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">伦敦，1872年
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">Phileas Fogg 先生的住所。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; london //这是跳转
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== london === //这是节点
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">Phileas Fogg 先生早早从改革俱乐部回到了家，并乘坐了新型的蒸汽运输机！   
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“领航，” 他喊到。 “我们去环游世界！”</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573976428053-12900656-703c-4127-814e-a8749cb3a9b6.png" alt="image.png"  ></span></p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573975510052-2885bcdf-ce95-4838-9460-3508f94fea67.png" alt="image.png"  ></span></p>
<p> </p>
<h3 id="5jLih">特殊：END</h3>
<p>这个故事的结尾，还有一种特殊的跳转。如果你跳转到“ <code>END</code>”，会告诉 INK 我们完成了，这里是<strong>结局</strong>。</p>
<p> </p>
<div id="VhgT3"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== ending //这也是节点 开始
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“我们将在八十天内环游地球。” 他很平静地提出了这个近乎疯狂地计划“我们8:25去巴黎。一小时后。”
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; END //特殊的跳转 结局</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573976466710-71f71ac1-fcb6-4a5a-b4fe-5caa8f495378.png" alt="image.png"  ></span></p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573976130461-3b53fb83-0249-4cef-bcbe-51e88841110d.png" alt="image.png"  ></span></p>
<p> </p>
<p>试着删除例子中该有的 <code>-&gt; END</code> ，Inky 将在边缘显示错误。若将鼠标悬停在警告上，会提示你“loose end”。</p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573976364029-5506ce09-cc93-48dd-9cfa-42a4e61fad20.png" alt="image.png"  ></span></p>
<p> </p>
<p>这是 Inky 的一个重要的帮助功能，当你故事越来越复杂时，这些警告可提醒你仍要编写哪些部分。</p>
<p> </p>
<h3 id="QAcWa">胶水* glue</h3>
<p>如必须让内容在同一行显示，还可以使用胶水（glue） <code>&lt;&gt;</code> 将其强制黏在同一行。</p>
<p> </p>
<div id="CHWhw"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我们回家&lt;&gt; 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; to_savile_row 
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== to_savile_row ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">去萨维尔街&lt;&gt;
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; as_fast_as_we_could
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== as_fast_as_we_could ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">尽可能的快
</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>你会在预览看到  <code>我们回家去萨维尔街尽可能的快</code> ，而非分三行显示。</p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1574060159019-c0b3ac4b-8380-48ab-a105-eab38634d0c3.png" alt="image.png"  ></span></p>
<p> </p>
<h2 id="PMmCt">3. 选项 choices</h2>
<p>谈到分歧，为了使互动小说更有趣，我们需要的最后一个关键功能当然是选项（choices）：</p>
<p><code>+ “环游世界，先生？” </code></p>
<p>选项看起来是 INK 中最重要的元素。通常它们会与跳转直接结合在一起，以便能创造一个直接跳转到故事其他地方的选项。</p>
<p><code>+ [点头。] -&gt; nod</code></p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573981901328-894dd45e-d99a-40b3-816c-1081c07674ea.png" alt="image.png"  ></span></p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="image.png" src="https://cdn.nlark.com/yuque/0/2019/png/262531/1573981932950-da1aac14-00b3-4948-8c4d-e100b7fba968.png" alt="image.png"  ></span></p>
<p> </p>
<p>我们编写这些内容时，需要注意几件事：</p>
<p>通常，你输入的选项内容既会成为可点击的选项，也会成为你点击后出现的文本的一部分。但是，如果你想要一个“无声的”（如动作）选项，则可以将选项放在<code>[</code>方括号中<code>]</code>，如上方第二个示例所示。</p>
<p>这可以用于某些形式，像是不同的叙述风格。例如：</p>
<p> </p>
<div id="kl7cJ"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ [草率的点头]     -&gt; nod
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ 我草率的点了点头，  -&gt; nod
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">== nod ==
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">这有些不可思议。</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>第一个选项只会显示，“这有些不可思议。”；而第二个会显示“我草率的点了点头，这有些不可思议。”</p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="4.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/262531/1573982192901-ba58f144-8d28-4ac3-8aee-df54c1e0c3d6.gif" alt="4.gif"  ></span></p>
<p> </p>
<p>你还可以在选项下添加额外的文本行。这将在选择后显示。例如：</p>
<p> </p>
<div id="l3osU"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ “环游世界，先生？” 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    我大吃一惊。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “你在开玩笑！” 我认真地对他说。“你一定是在和我开玩笑，先生。” 
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">    -&gt; astonished
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== astonished ===
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">略……</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>等同于——</p>
<p> </p>
<div id="zQIZG"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ “环游世界，先生？”  -&gt; astonished
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== astonished ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">我大吃一惊。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">“你在开玩笑！” 我认真地对他说。“你一定是在和我开玩笑，先生。” 
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">略……</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>INK 是非常灵活的，它可以让你有很多不同的方式来构建你的故事。</p>
<p> </p>
<p>事实上*，<code>]</code> 之前的部分会被显示为选项，<code>[]</code> 内的内容会在选择后隐藏。你也可以把 <code>[]</code> 当作选项与选择之后内容的分隔符，便于快速输入，这些内容会显示在同一行。</p>
<p><code>+ 我草率的点了点头，[]这有些不可思议。</code></p>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="9.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/262531/1574058322249-1e7c1c0f-b46e-4d78-aa68-235d03013077.gif" alt="9.gif"  ></span></p>
<p> </p>
<p>小技巧，你也可以试试 <code>“就是死我也不会吃的[！”]……真香！”</code> ，体验下选择前后的语气变化，这种细节在某些叙事风格种很有用。</p>
<p> </p>
<h3 id="hpIe1">一次性选项*</h3>
<p>如想要选项只能被被玩家点一次，最简单的方式就是把选项的 <code>+</code> 改成 <code>*</code> 。</p>
<p><code>* “环游世界，先生？”</code></p>
<p>举个例子，你会发现下图中的一次性选项“2 Hello back!”不见了。</p>
<p> </p>
<div id="TXzwa"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt;hello
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">== hello
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">Hello world!
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+   1 Hello back! //普通选项
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    Nice to hear from you! -&gt;hello
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">*   2 Hello back!//一次性选项
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    Nice to hear from you! -&gt;hello
</span></span>    
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">+   3 Hello back!
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    Nice to hear from you! -&gt;hello</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="5.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/262531/1573984212426-9aee6a82-4341-428d-bb2f-eaf2b6187c9f.gif" alt="5.gif"  ></span></p>
<p> </p>
<h3 id="aSScG">结构说明</h3>
<p>关于 INK 整体结构最后的说明：INK 始终从文件的顶部开始，然后一直向下运行。但如果你将所有内容拆分为结点，则务必确保在文件顶部至少有一个<strong>初始跳转</strong>（如<code>-&gt; top_knot</code>），以告诉它以哪个结点开始（修改初始跳转，可更方便的进行测试）。</p>
<p> </p>
<div id="B3EhQ"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; top_knot //初始跳转
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">=== top_knot ===
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">Hello world!
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; END</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>现在，为什么不尝试续写个故事呢？尝试插入更多的结点，更多的跳转，更多的选项，更多的结局，看看会发生什么！作为练习的开始，也许先试着把介绍性段落变成你的结点？</p>
<p> </p>
<h2 id="dkQAa">4. 条件内容</h2>
<p>到目前为止，我们编写的所有内容，都能写成可发布的互动小说。但如果我们想根据玩家之前的经历不同，显示不同的文本和选项呢？</p>
<p>INK 会记录运行中玩家经历的每个内容，以便你今后查询。例如，要确定玩家是否经过了称为（地下墓穴）的特定结点 <code>catacombs</code>：</p>
<p> </p>
<div id="iMcjv"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ catacombs: //条件：经过地下墓穴
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    这里比巴黎的地下墓穴还要暗。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>在这个<code>{</code>大括号中<code>}</code> ，你可以包含多行内容，甚至是跳转和选项（只有玩家<strong>经过</strong>了“catacombs”这个结点，大括号里的内容才会被显示）。</p>
<p> </p>
<p>但是，一个更简洁的编写条件选项的方法如下，仅当玩家经过某个结点后才显示特定选项的方法：</p>
<p><code>+ {catacombs} [告诉她你的发现] -&gt; tell_her</code></p>
<p>如果你想反转这个条件，换句话说，如果你想确认玩家没有经过地下墓穴，你只需在前面简单地加上：<code>not</code></p>
<p><code>+ {not catacombs} [前往地下墓穴] -&gt; catacombs</code></p>
<p>最后，你可用 <code>and</code> 和 <code>or</code> 形成更复杂的判定条件，并且用小括号来阐明逻辑的细节。几个例子：</p>
<p> </p>
<div id="sNU1E"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ catacombs and not pick_up_ring: //条件：经过地下墓穴且没经过捡起戒指
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    “所以你之后没找到它？”她质问到。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    + [抱歉] -&gt; apologise
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<div id="VVOtr"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ (catacombs or cross_river or sing_in_rain) and not buy_new_shoes: 
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">        //条件：（经过地下墓穴或穿过河或在雨中唱歌）且没经过买新鞋
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">    那天我的鞋子早就烂了。
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">}</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p>再看个例子*，你能发现选“白色的”虽然和灰色的后面走的是一样的结点，但显示的内容变多了。</p>
<p> </p>
<div id="lFRiK"    >
<div class="lake-codeblock-content">
<div class="">
<pre class="cm-s-default"><span class="lake-preview-line"><span class="lake-preview-codeblock-content">你想买什么颜色的狼？
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ 白色的…… -&gt; white
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ 灰色的…… -&gt; gray
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">== white
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">让我找找看。
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; gray
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">== gray
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">{ white:白色的狼卖没了。 }要买灰色的狼吗?
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ {white}我一定要白色的狼-&gt;wolf
</span></span><span class="lake-preview-line"><span class="lake-preview-codeblock-content">+ 好的，买灰色的狼-&gt;wolf
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">== wolf
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">……略
</span></span>
<span class="lake-preview-line"><span class="lake-preview-codeblock-content">-&gt; END</span></span></pre>
</div>
</div>
</div>
<p> </p>
<p><span    ><img class="image lake-drag-image" title="1.gif" src="https://cdn.nlark.com/yuque/0/2019/gif/262531/1574678637567-6fc85742-97ee-4785-babd-f8dfdcbc194d.gif" alt="1.gif"  ></span></p>
<p> </p>
<div id="HTEC9"    ><hr></div>
<h1 id="HHvam"> </h1>
            ]]>
        </content>
    </entry>
</feed>
